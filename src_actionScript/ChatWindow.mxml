<?xml version="1.0" encoding="utf-8"?>
<torgtaitai:ResizableWindow
   xmlns:mx="http://www.adobe.com/2006/mxml"
   xmlns:torgtaitai="*"
   title="チャット"
   width="220"
   height="220"
   showCloseButton="true"
   rollOver="changeLogVisible(event, true)"
   >
<!--
   rollOut="changeLogVisible(event, false)"
-->
  
  <mx:Box height="100%" width="100%"
                    paddingTop="0"
                    paddingBottom="0" 
          >
    
    <mx:VDividedBox id="chatMessageLogBoxDivder" width="100%" height="100%" mouseDown="blockEvent(event)"
                    paddingTop="0"
                    paddingBottom="0" 
                    >
      
      <mx:TabNavigator id="chatMessageLogBoxTab" width="100%" height="100%"
                       paddingTop="0"
                       paddingBottom="0" 
                       change="changeChannel()"
                       >
      </mx:TabNavigator>
      
      <mx:Box id="chatControlBox" width="100%" height="75" verticalGap="1" >
        <mx:HBox id="nameBox" width="100%" height="25">
	      <mx:Label text="名前"/>
          <torgtaitai:SuggestComboBox id="chatCharacterName" 
                       change="changedChatCharacterName()"
                       tabIndex="1"
                       width="100%"
                       minWidth="0"
                       rowCount="10"
                       />
          
          <mx:ComboBox id="standingGraphicsStates"
                       tabIndex="2"
                       rowCount="10"
                       />
          
          <mx:Image id="secretTalkButton" source="{keyIcon}"
                    click="visibleSecretTalk()"
                    toolTip="秘話機能有効化"
                    />
          <mx:ComboBox id="sendtoBox"
                       toolTip="送信先：（全員）以外ならその相手にだけ送信されます"
                       change="changeSendtoBox()"
                       rowCount="10"
                       visible="false"
                       width="0"
                       />
          
          <mx:HBox width="100%" height="100%">
            
            <mx:HBox id="diceBotGameTypeBox" height="200">
              <mx:ComboBox id="diceBotGameType"
                           labelField="name"
                           toolTip="{diceBotHelpText}"
                           change="setDiceBotHelpText();"
                           rowCount="10"
                           >
              </mx:ComboBox>
              
              <mx:Image id="novelticModeButton" source="{novelticModeIcon}" click="changeNovelticMode()" />
              <mx:CheckBox id="isHideNovelticWindow" label="自動ログ隠し" fontSize="10"
                           toolTip="シフトキー・Ctrlキーを押しながらのマウス操作でもログは隠れなくなります。"
                           width="0" selected="true" visible="false" />
              <mx:Image id="chatFontSetButton" source="{chatFontIcon}" click="setChatFontWindow()" toolTip="チャット文字設定" />
              <mx:Image id="soundStatusImage" click="changeSoundState()" />
              <mx:Image id="voteImage" source="{voteIcon}" click="chatMessageTrader.vote()" toolTip="点呼／投票" />
              <mx:Image id="sendSoundButton" click="sendOrStopSound()"  />
              <mx:Image source="{cutInIcon}" click="openCreateCutInWindow()" toolTip="カットイン設定" />
              <mx:Image source="{standingGraphicsEditIcon}" click="openCreateStandingGraphicsWindow()"  toolTip="立ち絵設定" />
              <mx:Image source="{fileUploadIcon}" click="uploadFile()" toolTip="ファイルアップローダー" />
              <!-- <mx:Image source="{twitterIcon}" click="sendToTwitter()" toolTip="Twitter" /> -->
      
            </mx:HBox>
          </mx:HBox>
          
        </mx:HBox>
        
        <mx:Box width="100%" height="100%">
          
          <mx:HBox width="100%" height="100%">
	        <mx:Label text="発言"/>
            <mx:Box id="chatMessageBase" width="100%" height="100%">
              <mx:TextArea id="chatMessageInput" width="100%" height="100%" text=""
                           keyDown="keyDownInChatMessage(event)"
                           keyUp="keyUpInChatMessage(event)"
                           tabIndex="3"
                           />
            </mx:Box>
            
            <mx:Box id="sendButtonBox" width="60" height="100%" horizontalAlign="center" verticalAlign="middle">
              <mx:Button id="sendMessageButton" label="送信" height="18" width="60" click="sendChatMessageLocal()" />
              <mx:Button label="ログ保存" height="18" width="60" click="saveChatLogHtml()" paddingLeft="2" paddingRight="2" />
            </mx:Box>
          </mx:HBox>
          
        </mx:Box>
      </mx:Box>
      
    </mx:VDividedBox>
  </mx:Box>
  
  <mx:Style>
.nocheckTabStyle { fill-colors: #FFF04B, #FFFFCC; }

.maximizeRestoreButton
{
	up-skin:        	Embed("/image/icons/maximize_up.png");
	over-skin:      	Embed("/image/icons/maximize_over.png");
	down-skin:      	Embed("/image/icons/maximize_up.png");
	selected-up-skin:   Embed("/image/icons/restore_up.png");
	selected-over-skin: Embed("/image/icons/restore_over.png");
	selected-down-skin: Embed("/image/icons/restore_up.png");
}

  </mx:Style> 

  <mx:Script>
    <![CDATA[

        [Embed(source='image/icons/page_white_get.png')]
        [Bindable]
        private static var fileUploadIcon:Class;
    
        [Embed(source='image/icons/twitter.png')]
        [Bindable]
        private static var twitterIcon:Class;
    
        [Embed(source='image/icons/key.png')]
        [Bindable]
        private static var keyIcon:Class;
    
        [Embed(source='image/icons/sound.png')]
        [Bindable]
        private static var soundOnIcon:Class;
    
        [Embed(source='image/icons/font.png')]
        [Bindable]
        private static var chatFontIcon:Class;
    
        [Embed(source='image/icons/sound_mute.png')]
        [Bindable]
        private static var soundOffIcon:Class;
    
        [Embed(source='image/icons/bell.png')]
        [Bindable]
        private static var sendSoundIcon:Class;
    
        [Embed(source='image/icons/cancel.png')]
        [Bindable]
        private static var stopSoundIcon:Class;
    
        [Embed(source='image/icons/film.png')]
        [Bindable]
        private static var cutInIcon:Class;
        
        [Embed(source='image/icons/user_comment.png')]
        [Bindable]
        private static var voteIcon:Class;

        [Embed(source='image/icons/user_edit.png')]
        [Bindable]
        private static var standingGraphicsEditIcon:Class;
        
        [Embed(source='image/icons/book_open.png')]
        [Bindable]
        private static var novelticModeIcon:Class;
        
        [Bindable]
        private var diceBotHelpText:String;
        
        
        import mx.containers.dividedBoxClasses.BoxDivider;
        import flash.events.Event;
        import flash.net.URLRequest;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.controls.Text;
        import mx.core.Application;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;
        import mx.managers.ToolTipManager;
        import mx.utils.StringUtil;
        import mx.core.UIComponent;

        private static var instance:ChatWindow;
        
        private var thisObj:ChatWindow;
        private var isActive:Boolean = true;
        private var isSoundOn:Boolean = true
        private var standingGraphics:StandingGraphics = new StandingGraphics();
        private var fileReferenceForDownload:FileReference = null;
        private var chatFontColor:String = "000000";
        private var chatBackgroundColor:String = "FFFFFF";
        private var chatFontSize:int = 11;
        private var chatMessageTrader:ChatMessageTrader;
        private var novelticMode:NovelticMode = null;
        
        private var diceRollPlace:UIComponent = new UIComponent();
        
        public static function getInstance():ChatWindow {
            return instance;
        }
        
        public function getDiceRollPlace():UIComponent {
            return diceRollPlace;
        }
        
        public function getChatFontColorValue():int {
            return parseInt(getChatFontColor());
        }
        
        public function getChatFontColor():String {
            return chatFontColor;
        }
        
        public function getChatFontSize():int {
            return chatFontSize;
        }
        
        public function getStandingGraphics():StandingGraphics {
            return standingGraphics;
        }
        
        public function isSoundOnMode():Boolean {
            return isSoundOn;
        }
        
        static private var defaultCharacterName:String = "";
        
        static public function setDefaultCharacterName(name:String):void {
            defaultCharacterName = name;
            Log.logging('defaultCharacterName', defaultCharacterName);
        }
        
        public function get publicChatChannelBox():ChatMessageLogBox {
            return getChatChannle(0);
        }
        
        public function printStandingGraphics(senderName:String,
                                              chatMessage:String,
                                              effectable:Boolean,
                                              standingGraphicFilterImages:Array):Object {
            var window:UIComponent = this;
            
            return standingGraphics.print(senderName,
                                          chatMessage,
                                          effectable,
                                          standingGraphicFilterImages,
                                          window.x, window.y, window.width);
        }
        
        static public function getPlayerInfo():Object {
            var info:Object = Config.getInstance().loadInfo( getSaveInfoKeyNameForPlayerInfo() );
            return info;
        }
        
        private function loadPlayerInfo():void {
            var info:Object = getPlayerInfo();
            if( info == null ) {
                return;
            }
            
            var characterName:String = info["characterName"];
            Log.logging("loadPlayerInfo characterName", characterName);
            if( characterName == "" ) {
                characterName = defaultCharacterName;
            }
            
            chatCharacterName.text = characterName;
            chatCharacterName.validateNow();
            Log.logging("loadPlayerInfo end, chatCharacterName.text", chatCharacterName.text);
        }
        
        
        private var initLoaded:Boolean = false;
        
        private function loadChatInfo():void {
            initLoaded = true;
            
            var info:Object = Config.getInstance().loadInfo( getSaveInfoKeyNameForChatFont() );
            
            Log.logging("loadChatInfo info", info);
            
            if( info == null ) {
                return;
            }
            
            setChatFontSize( info["chatFontSize"] );
            setChatFontColor( info["chatFontColor"] );
            setChatBackgroundColor( info["chatBackgroundColor"] );
            
            var numberString:String = DodontoF_Main.getInstance().getGuiInputSender().getRoomNumberName();
            setDiceBotGameType( info[getDiceBotGameTypeKeyName()] );
            
            Log.logging("loadChatInfo info", info);
            Log.logging("diceBot", info[getDiceBotGameTypeKeyName()]);
        }
        
        public function setDiceBotGameType(gameType:String):void {
            var index:int = Utils.selectComboBox(diceBotGameType, gameType, "gameType");
            if( index == -1 ) {
                Utils.selectComboBox(diceBotGameType, gameType, "name");
            }
            
            diceBotGameType.validateNow();
            setDiceBotHelpText();
        }
        
        private function getDiceBotGameTypeKeyName():String { 
            var numberString:String = DodontoF_Main.getInstance().getGuiInputSender().getRoomNumberName();
            var keyName:String = numberString + "_diceBotGameType";
            return keyName;
        }
        
        public function saveChatInfos():void {
            Log.logging("initLoaded", initLoaded);
            
            if( ! initLoaded ) {
                return;
            }
            
            var info:Object = Config.getInstance().loadInfo( getSaveInfoKeyNameForChatFont() );
            if( info == null ) {
                info = new Object();
            }
            
            info["chatFontSize"] = chatFontSize;
            info["chatFontColor"] = chatFontColor;
            info["chatBackgroundColor"] = chatBackgroundColor;
            info[getDiceBotGameTypeKeyName()] = getGameType();
            
            Log.logging("saveChatInfos", info);
            
            Config.getInstance().saveInfo(getSaveInfoKeyNameForChatFont(), info);
        }
        
        public function setInitPosition():void {
            if( loadPosition() ) {
                return;
            }
            
            setInitPositionDefault();
        }
        
        override public function setInitPositionDefault():void {
            var screenWidth:int = DodontoF_Main.getInstance().getScreenWidth();
            var screenHeigth:int = DodontoF_Main.getInstance().getScreenHeight();
            var diceBoxWidth:int = DodontoF_Main.getInstance().getDiceBoxWidth();
            
            this.x = 0;
            this.y = screenHeigth - this.height;
            this.width = screenWidth - diceBoxWidth - 10;
        }
    
        override public function getSaveInfoKeyName():String {
            return "ChatWindow";
        }
        
        private function getSaveInfoKeyNameForChatFont():String {
            return "ChatWindow:Font";
        }
        
        static private function getSaveInfoKeyNameForPlayerInfo():String {
            return "ChatWindow:PlayerInfo";
        }
        
        override protected function getHeaderHeight():Number {
            return 14;
        }
        
        
        public function setChannelNames(changedChannelNames:Array):void {
            
            if( changedChannelNames.length == 0 ) {
                Log.loggingError("チャンネル数が0で設定されています。正しいチャンネル設定を行ってください");
                return;
            }
            
            changedChannelNames = getChannelNamesWhenReplayMode(changedChannelNames);
            
            removeChanells(changedChannelNames);
            addChannels(changedChannelNames);
            renameChanells(changedChannelNames);
            
            if( DodontoF_Main.getInstance().isVisiterMode() ) {
                selectChatChannel(lastChatChannel);
            }
        }
        
        private function getChannelNamesWhenReplayMode(names:Array):Array {
            
            if( ! DodontoF_Main.getInstance().isReplayMode() ) {
                return names;
            }
            
            var result:Array = new Array();
            for(var i:int = 0 ; i < names.length ; i++) {
                var name:String = names[i];
                
                if( DodontoF_Main.getInstance().getReplay().isIgnoreChannelName(name) ) {
                    continue;
                }
                
                result.push(name);
            }
            
            return result;
        }
        
        private function addChannels(changedChannelNames:Array):void {
            for(var i:int = channels.length ; i < changedChannelNames.length ; i++) {
                addChannel(changedChannelNames[i]);
            }
        }
        private function removeChanells(changedChannelNames:Array):void {
            while( channels.length > changedChannelNames.length ) {
                var box:ChatMessageLogBox = channels.pop() as ChatMessageLogBox;
                chatMessageLogBoxTab.removeChild(box);
            }
        }
        private function renameChanells(changedChannelNames:Array):void {
            for(var i:int = 0 ; i < changedChannelNames.length ; i++) {
                var box:ChatMessageLogBox = getChatChannle(i);
                box.setLabel(changedChannelNames[i]);
            }
        }
        
        private var channels:Array = new Array();
        
        private function initChannels():Array {
            channels = [];
            publicChatChannelBox.init(novelticMode);
            
            var changedChannelNames:Array = DodontoF_Main.getInstance().getChatChannelNames();
            for(var i:int = 0 ; i < changedChannelNames.length ; i++) {
                addChannel(changedChannelNames[i]);
            }
            
            return channels;
        }
        
        public function addChannel(labelName:String):void {
            var box:ChatMessageLogBox = new ChatMessageLogBox();
            box.label = labelName
            box.init(novelticMode);
            
            chatMessageLogBoxTab.addChild(box);
            chatMessageLogBoxTab.validateNow();
            
            channels.push(box);
        }
        
        public function get publicChatChannel():int {
            return getChatChannelIndex(publicChatChannelBox);
        }
        
        public function get lastChatChannel():int {
            return (channels.length - 1);
        }
        
        public function get chatChannelCount():int {
            return channels.length;
        }
        
        private function getChatChannelIndex(target:ChatMessageLogBox):int {
            var returnIndex:int = 0;
            
            eachChatChannel_with_index(function(i:ChatMessageLogBox, index:int):void {
                    if( target == i ) {
                        returnIndex = index;
                    }
                });
            
            return  returnIndex;
        }
        
        public function getSelectedChatChannleIndex():int {
            return chatMessageLogBoxTab.selectedIndex;
        }
        
        public function getSelectedChatChannle():ChatMessageLogBox {
            return getChatChannle(getSelectedChatChannleIndex());
        }
        
        private var dummyBox:ChatMessageLogBoxDummy = new ChatMessageLogBoxDummy();
        
        public function getChatChannle(channel:int):ChatMessageLogBox {
            var box:ChatMessageLogBox = channels[channel] as ChatMessageLogBox;
            if( box == null ) {
                return dummyBox;
            }
            
            return box;
        }
        
        public function eachChatChannel_with_index(action:Function):void {
            for(var i:int = 0 ; i < channels.length ; i++) {
                var chatChannel:ChatMessageLogBox = getChatChannle(i);
                action( chatChannel, i );
            }
        }
        
        public function eachChatChannel(action:Function):void {
            eachChatChannel_with_index(function(i:ChatMessageLogBox, index:int):void {
                    action(i);
                });
        }
        
        public function changeChannel():void {
            getSelectedChatChannle().resetLabelCount();
            
            var channel:int = getSelectedChatChannleIndex();
            chatMessageLogBoxTab.getTabAt(channel).styleName = undefined;
        }
        
        public function setChatChannelVisible(channel:int, b:Boolean):void {
            chatMessageLogBoxTab.getTabAt(channel).visible = b;
        }
        
        public function selectChatChannel(channel:int):void {
            chatMessageLogBoxTab.selectedIndex = channel;
        }
        
        public function invisibleChatTab():void {
            for(var i:int = 0 ; i < channels.length ; i++) {
                var channel:int = i;
                var tab:Button = chatMessageLogBoxTab.getTabAt(channel);
                
                if( tab == null ) {
                    continue;
                }
                
                tab.height = 0;
                tab.width = 0;
            }
        }
        
        private var controlsHolder:HBox;
        private var maximizeRestoreButton:Button;
        
        override protected function createChildren():void {
            super.createChildren();
            
            if ( ! headerDivider) {
                headerDivider = new Sprite();
                titleBar.addChild(headerDivider);
            }
            
            if ( ! controlsHolder ) {
                controlsHolder = new HBox();
                controlsHolder.setStyle("paddingRight", getStyle("paddingRight"));
                controlsHolder.setStyle("horizontalAlign", "right");
                controlsHolder.setStyle("verticalAlign", "middle");
                controlsHolder.setStyle("horizontalGap", 3);
                rawChildren.addChild(controlsHolder);
                Log.logging("controlsHolder created.");
                
                if( ! statusTextField ) {
                    rawChildren.setChildIndex(controlsHolder, 1);
                }
            }
            
            if ( ! maximizeRestoreButton ) {
                maximizeRestoreButton = new Button();
                maximizeRestoreButton.width = 14;
                maximizeRestoreButton.height = 14;
                maximizeRestoreButton.styleName = "maximizeRestoreButton";
                controlsHolder.addChild(maximizeRestoreButton);
                Log.logging("maximizeRestoreButton created.");
            }
            
            addMaixizeEventListeners();
        }
        
        private function addMaixizeEventListeners():void {
            maximizeRestoreButton.addEventListener(MouseEvent.CLICK, onClickMaximizeRestoreButton);
        }
        
        private var originalHeigth:int = 100;
        private var originalYPosition:int = 0;
        
        private function onClickMaximizeRestoreButton(event:MouseEvent=null):void {
            
            if (windowState == WINDOW_STATE_DEFAULT) {
                originalHeigth = this.height;
                originalYPosition = this.y;
                
                var heightPadding:int = DodontoF_Main.getInstance().getDodontoF().getMainBarHeight();
                this.height = DodontoF_Main.getInstance().getScreenHeight() - heightPadding;
                this.y = heightPadding;
                
                windowState = WINDOW_STATE_MAXIMIZED;
                maximizeRestoreButton.selected = true;
                setSavePositionEnable(false);
                
            } else if (windowState == WINDOW_STATE_MAXIMIZED) {
                this.height = originalHeigth;
                this.y = originalYPosition;
                windowState = WINDOW_STATE_DEFAULT;
                maximizeRestoreButton.selected = false;
                setSavePositionEnable(true);
                
                this.validateNow();
                var channel:int = getSelectedChatChannleIndex();
                var isScrollFoced:Boolean = true;
                scrollChatMessageLogIfPositionIsLast(channel, isScrollFoced);
            }
        }
        
        public static const MINIMIZED_HEIGHT:Number = 22;
        public static const WINDOW_STATE_DEFAULT:Number = -1;
        public static const WINDOW_STATE_MINIMIZED:Number = 0;
        public static const WINDOW_STATE_MAXIMIZED:Number = 1;
        
        public var windowState:Number = WINDOW_STATE_DEFAULT; // Corresponds to one of the WINDOW_STATE variables.
        private var headerDivider:Sprite;
        
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            
            var deltaY:Number = windowState == WINDOW_STATE_MINIMIZED ? -1 : 0;
            var graphics:Graphics = headerDivider.graphics;
            graphics.clear();
            graphics.lineStyle(1, getStyle("borderColor"));
            graphics.moveTo(1, titleBar.height + deltaY);
            graphics.lineTo(titleBar.width, titleBar.height + deltaY);
            
            controlsHolder.y = titleBar.y;
            controlsHolder.width = unscaledWidth - 30;
            controlsHolder.height = titleBar.height;
            
            statusTextField.width = unscaledWidth - 200;
            
            titleTextField.width = titleBar.width - getStyle("paddingLeft") - getStyle("paddingRight");
        }
        
        override public function set status(text:String):void {
            super.status = text + "            ";
        }
        
        override public function setup():void {
            titleBar.addChild(diceRollPlace);
            
            publicChatChannelBox.checkNovelMode();
            initChannels();
            
            novelticMode = new NovelticMode(this);
            chatMessageTrader= new ChatMessageTrader(this);
            
            instance = this;
            thisObj = this;
            
            initDiceBotInfos();
            
            setInitPosition();
            setSoundStateImage();
            
            diceBotGameType.visible = isDiceBotOn;
            if( ! isDiceBotOn ) {
                diceBotGameType.width = 0;
            }
            ToolTipManager.showDelay = 0;
            ToolTipManager.hideDelay = Infinity;
            
            setDiceBotHelpText();
            
            this.addEventListener(Event.ACTIVATE, function():void {instance.isActive = true;});
            this.addEventListener(Event.DEACTIVATE, function():void {instance.isActive = false;});
            this.addEventListener(MouseEvent.MOUSE_WHEEL, wheelEvent);
            this.chatMessageInput.addEventListener(MouseEvent.MOUSE_WHEEL, wheelEvent);
            
            loadPlayerInfo();
            changedChatCharacterName();
            setSendSoundButtonOn();
            
            novelticMode.init();
            loadChatInfo();
            setChatFontSize( chatFontSize );
            
            setResizeEventFunction( novelticMode.resizeAndMoveWindow );
            setMoveEventFunction( novelticMode.resizeAndMoveWindow );
            
            changeVisiterMode();
        }
        
        private function initDiceBotInfos():void {
            var diceBotInfos:Array = DodontoF_Main.getInstance().getDiceBotInfos();
            diceBotGameType.dataProvider = diceBotInfos;
        }
        
        private function wheelEvent(event:MouseEvent):void {
            if( novelticMode.isNovelticModeOn() )  {
                novelticMode.wheelEvent(event);
                return;
            }
            
            ChatWindow.wheelScrollComponent(getSelectedChatChannle(), event);
        }
        
        public static function wheelScrollComponent(box:Box, event:MouseEvent):void {
            box.verticalScrollPosition -= (event.delta * 3);
        }
        
        public function clearForReplay():void {
            standingGraphics.clear();
            clearPublicChatMessageLog();
        }
        
        public function setStandingGraphics(infos:ArrayCollection):void {
            standingGraphics.clear();
            for(var i:int = 0 ; i < infos.length ; i++) {
                var info:Object = infos[i];
                standingGraphics.add(info);
            }
            refreshChatCharacterName();
        }
        
        public function getChatCharacterName():String {
            var name:String = chatCharacterName.text;
            if( DodontoF_Main.getInstance().isVisiterMode() ) {
                name += "＠見学";
            }
            return name;
        }
        
        public function refreshChatCharacterName():void {
            Log.logging("refreshChatCharacterName() begin, chatCharacterName.text", chatCharacterName.text);
            
            var tmpChatCharacterName:String = chatCharacterName.text;
            
            var names:Array = standingGraphics.findAllNames();
            
            var dataProvider:Array = [];
            for(var i:int = 0 ; i < names.length ; i++) {
                var option:Object = {
                    data : names[i],
                    label : names[i]};
                dataProvider.push(option);
            }
            chatCharacterName.dataProvider = dataProvider;
            chatCharacterName.validateNow();
            standingGraphicsStates.validateNow();
            
            chatCharacterName.text = tmpChatCharacterName;
            changedChatCharacterName();
            Log.logging("refreshChatCharacterName() end, chatCharacterName.text", chatCharacterName.text);
        }
        
        private function savePlayerInfoOnLocal():void {
            Log.logging("savePlayerInfoOnLocal");
            savePlayerInfo(chatCharacterName.text);
        }
        
        static public function savePlayerInfo(name:String):void {
            Log.logging("savePlayerInfo static");
            
            var info:Object = {
                characterName: name
            };
            
            Config.getInstance().saveInfo(getSaveInfoKeyNameForPlayerInfo(), info);
            
            Log.logging("savePlayerInfo characterName", info);
        }
        
        private function changedChatCharacterName():void {
            Log.logging("changedChatCharacterName() begin");
            
            var name:String = chatCharacterName.text;
            var stateList:Array = standingGraphics.findAllStates(name);
            
            Log.logging("changedChatCharacterName name", name);
            
            if( stateList.length == 0 ) {
                standingGraphicsStates.visible = false;
                standingGraphicsStates.width = 0;
            } else {
                standingGraphicsStates.visible = true;
                standingGraphicsStates.explicitWidth = NaN;
            }
            
            var dataProvider:Array = [];
            for(var i:int = 0 ; i < stateList.length ; i++) {
                var option:Object = {
                    data : stateList[i],
                    label : stateList[i]};
                dataProvider.push(option);
            }
            var preState:String = Utils.getComboBoxText(standingGraphicsStates);
            standingGraphicsStates.dataProvider = dataProvider;
            Utils.selectComboBox(standingGraphicsStates, preState);
            
            savePlayerInfoOnLocal();
            
            Log.logging("changedChatCharacterName() end, chatCharacterName.text", chatCharacterName.text);
        }
        
        private function setDiceBotHelpText():void {
            saveChatInfos();
            var helpText:String = diceBotGameType.dataProvider[0].info;
            
            var item:Object = diceBotGameType.selectedItem;
            
            if( item.gameType == '' ) {
                helpText += "==【その他】===============================\n";
                helpText += "ゲーム固有の判定がある場合はこの場所に記載されます。";
            } else {
                helpText += ("==【" + item.name + "専用】=======================\n")
                helpText += item.info;
            }
            
            diceBotHelpText = helpText;
        }
        
        private static var isDiceBotOn:Boolean = true;
        public static function setDiceBotOn(b:Boolean):void {
            isDiceBotOn = b;
        }
    
        private var isChatMessageInputing:Boolean = false;
        public function onChatMessageInput(event:TextEvent):void {
            Log.logging("event.text", event.text);
            isChatMessageInputing = true;
        }
        
        public function keyUpInChatMessage(event:KeyboardEvent):void {
            if( ! readyToSend ) {
                return;
            }
            
            sendChatMessage(getSelectedChatChannleIndex(), chatMessageCash);
            readyToSend = false;
        }
        
        private var chatMessageCash:String = "";
        private var readyToSend:Boolean = false;
        
        public function keyDownInChatMessage(event:KeyboardEvent):void {
            
            if( event.ctrlKey ) {
                if( printHistory(event) ) {
                    return;
                }
                if( shiftChatChannel(event) ) {
                    Log.logging("shift");
                    return;
                }
            }
            
            if( readyToSend ) {
                return;
            }
        
            if( event.keyCode != Keyboard.ENTER ) {
                return;
            }
        
            if( event.shiftKey || event.ctrlKey ) {
                insertRetun();
                return;
            }
            
            readyToSend = true;
            chatMessageCash = chatMessageInput.text;
            
            chatMessageInput.callLater(function():void {
                    chatMessageInput.text = "";
                });
            
            chatInputHistory.push(chatMessageCash);
            chatInputHistoryCurrentIndex = chatInputHistory.length;
            newestChatInput = "";
            
            //event.stopPropagation();
        }
        
        private var newestChatInput:String = "";
        private var chatInputHistory:Array = [];
        private var chatInputHistoryCurrentIndex:int = 0;
        
        private function printHistory(event:KeyboardEvent):Boolean {
            if( event.keyCode == Keyboard.UP ) {
                
                if( chatInputHistoryCurrentIndex == chatInputHistory.length ) {
                    if( newestChatInput == "" ) {
                        newestChatInput = chatMessageInput.text;
                    }
                }
                
                chatInputHistoryCurrentIndex -= 1;
            } else if( event.keyCode == Keyboard.DOWN ) {
                chatInputHistoryCurrentIndex += 1;
            } else {
                return false;
            }
            
            if( chatInputHistoryCurrentIndex < 0 ) {
                chatInputHistoryCurrentIndex = 0;
                return false;
            }
            
            if( chatInputHistoryCurrentIndex > chatInputHistory.length ) {
                chatInputHistoryCurrentIndex = chatInputHistory.length;
                return false;
            }
            
            var oldInput:String = "";
            if( chatInputHistoryCurrentIndex < chatInputHistory.length ) {
                oldInput = chatInputHistory[chatInputHistoryCurrentIndex];
            } else {
                oldInput = newestChatInput;
            }
            
            chatMessageInput.text = oldInput;
            return true;
        }
        
        public function shiftChatChannel(event:KeyboardEvent):Boolean {
            Log.logging("shiftChatChannel");
            var result:Boolean = false;
            
            Utils.shiftTabFocus(chatMessageLogBoxTab, event, function(index:int):void {
                result = true;
            });
            
            return result;
        }
        
        private function insertRetun():void {
            insertWord("\n", chatMessageInput);
        }
        
        public function addTextToChatMessageInput(text:String):void {
            chatMessageInput.text += text;
        }
        
        static public function insertWord(word:String, textArea:TextArea):void {
            var text:String  = textArea.text;
            var start:int = textArea.selectionBeginIndex;
            var last:int  = text.length;
            
            textArea.text = text.substring(0, start) + word + text.substring(start, last);
            
            // カーソルを正しく移動する
            //textArea.focus();
            var newIndex:int = start + word.length;
            textArea.setSelection(newIndex, newIndex);
        }
    
        public function getGameType():String { 
            return diceBotGameType.selectedItem.gameType;
        }
        
        public function sendChatMessageLocal():void {
            sendChatMessage(getSelectedChatChannleIndex(), chatMessageInput.text);
            chatMessageInput.callLater(function():void { chatMessageInput.text = ""; });
        }
        
        /*
        private var sendManyCount:int = 0;
        public function sendChatMessageLocalMany():void {
            var message:String = chatMessageInput.text;
            sendManyCount = 1;
            
            var seconds:int = 1;
            var count:int = 1000;
            var timer : Timer = new Timer(seconds * 1000, count);
            timer.addEventListener(TimerEvent.TIMER, function(event:TimerEvent) : void {
                    sendChatMessage(message + " " + sendManyCount++);
                });
            timer.start();
        }
        */
        
        public function sendChatMessageForDiceRollResult(channel:int, chatMessage:String):void {
            var isCheckDiceRoll:Boolean = false
            sendChatMessage(channel, chatMessage, isCheckDiceRoll);
        }
        
        public function changeChatChannelNumberForSystemLog(channel:int):int {
            if( DodontoF_Main.getInstance().isVisiterMode() ) {
                channel = this.lastChatChannel;
            }
            return channel;
        }
        
        public function sendChatMessage_selected(chatMessage:String):void {
            var channel:int = getSelectedChatChannleIndex();
            
            if( DodontoF_Main.getInstance().isVisiterMode() ) {
                channel = this.lastChatChannel;
            }
            
            sendChatMessage(channel, chatMessage);
        }
        
        public function sendChatMessage_public(chatMessage:String):void {
            var channel:int = publicChatChannel;
            
            if( DodontoF_Main.getInstance().isVisiterMode() ) {
                channel = this.lastChatChannel;
            }
            
            sendChatMessage(channel, chatMessage);
        }
        
        public function sendChatMessage(channel:int, chatMessage:String, isCheckDiceRoll:Boolean = true):void {
            Log.logging("sendChatMessage begin");
            
            if( DodontoF_Main.getInstance().isVisiterMode() ) {
                channel = this.lastChatChannel;
                selectChatChannel(channel);
            }
            
            var data:ChatSendData = new ChatSendData(channel, chatMessage);
            sendChatMessageByChatSendData(data, isCheckDiceRoll);
        }
        
        public function sendChatMessageByChatSendData(data:ChatSendData, isCheckDiceRoll:Boolean = true):void {
            Log.logging("sendChatMessageByChatSendData begin");
            if( data.getMessage() == "" ) {
                Log.logging("data.getMessage() is empty")
                return;
            }
            
            Log.logging("isCheckDiceRoll", isCheckDiceRoll)
            if( isCheckDiceRoll ) {
                var diceRollMessage:String = getDiceRollText(data.getMessage());
                Log.logging("diceRollMessage", diceRollMessage)
                
                if( diceRollMessage != null ) {
                    data.setMessage(diceRollMessage);
                    var gameType:String = getGameType();
                    Log.logging("sendDiceBotChatMessage(data, gameType) gameType", gameType)
                    sendDiceBotChatMessage(data, gameType);
                    return;
                }
            }
            
            Log.logging("chatMessageTrader.sendMessage(data)");
            chatMessageTrader.sendMessage(data);
        }
        
        public function chatMessageTrader_sendMessage_selectedChat(chatMessage:String):void {
            var channel:int = getSelectedChatChannleIndex();
            chatMessageTrader_sendMessage(channel, chatMessage);
        }
        
        public function chatMessageTrader_sendMessage_publicChatChannel(chatMessage:String):void {
            chatMessageTrader_sendMessage(publicChatChannel, chatMessage);
        }
        
        public function chatMessageTrader_sendMessage(channel:int, chatMessage:String):void {
            var data:ChatSendData = new ChatSendData(channel, chatMessage);
            
            chatMessageTrader.sendMessage(data);
        }
        
        
        private function getDiceRollText(targetText:String):String {
            if( ! isDiceBotOn ) {
                return null;
            }
            
            var targetText:String = Utils.changeZenkakuToHankakuOnDiceBot(targetText);
            var patterns:Array = getDicePatterns();
            
            for(var i:int = 0; i < patterns.length ; i++) {
                var pattern:RegExp = patterns[i];
                
                if( isMatchGamePreFixByTargetPattern( targetText, pattern ) ) {
                    return targetText;
                }
            }
            
            return null;
        }
        
        private var dicePatternsList:Object = new Object();
        
        private function getDicePatterns():Array {
            var diceIndex:int = diceBotGameType.selectedIndex;
            
            var patterns:Array = dicePatternsList[diceIndex];
            if( patterns != null ) {
                Log.logging("patterns is already exist");
                return patterns;
            }
            
            patterns = new Array();
            
            addPrefixToPatterns( 0, patterns);
            
            if( diceIndex != 0 ) {
                addPrefixToPatterns( diceIndex, patterns );
            }
            
            Log.logging("create new patterns");
            dicePatternsList[diceIndex] = patterns
            
            return patterns;
        }
        
        private function addPrefixToPatterns(index:int, patterns:Array):void {
            var prefixs:Array = diceBotGameType.dataProvider[index].prefixs;
            
            for each(var prefix:String in prefixs) {
                    patterns.push( new RegExp("^" + prefix, "i") );
                    patterns.push( new RegExp("^S" + prefix, "i") );
                }
        }
        
        private function isMatchGamePreFixByTargetPattern(targetText:String, pattern:RegExp):Boolean {
            var index:int = targetText.search( pattern );
            return ( index == 0 );
        }
        
        private function sendDiceBotChatMessage(chatSendData:ChatSendData, gameType:String = ""):void {
            chatMessageInput.text = "";
            
            chatSendData.replaceMessage("　", " ");
            var randomSeed:int = Dice.getRandomNumber(0xffff);
            
            var guiInputSender:GuiInputSender = DodontoF_Main.getInstance().getGuiInputSender();
            guiInputSender.sendDiceBotChatMessage(chatSendData, randomSeed, gameType,
                                                  sendDiceBotChatMessageResult);
        }
    
        
        private function getDiceBotParam(str:String):String {
            if( str == "" ) {
                return null;
            }
            return str;
        }
        
        public function sendDiceBotChatMessageResult(obj:Object):void {
            Log.loggingTuning("=>sendDiceBotChatMessageResult(event:Event) Begin");
        
            try {
                var jsonData:Object = SharedDataReceiver.getJsonDataFromResultEvent(obj);
                var isSecret:Boolean = jsonData.isSecret;
                Log.logging("isSecret", isSecret);
                
                if( ! isSecret ) {
                    Log.logging("result NOT isSecret");
                    return;
                }
                
                var channel:int = jsonData.channel;
                var name:String = jsonData.name;
                var state:String = jsonData.state;
                var sendto:String = jsonData.sendto;
                var color:String = jsonData.color;
                
                var message:String = jsonData.message;
                var data:ChatSendData = new ChatSendData(channel, message, name, state, sendto);
                data.setColorString(color);
                data.setDiceRollResult();
                SecretDiceWindow.printMessage(data);
            } catch(e:Error) {
                Log.loggingException("ChatWindow.sendDiceBotChatMessageResult()", e);
            }
        
            Log.loggingTuning("=>sendDiceBotChatMessageResult(event:Event) End");
        }

        public function sendDiceRollResultMessageForChatWindowUser(diceRolledText:String):void {
            var channel:int = getSelectedChatChannleIndex();
            var data:ChatSendData = new ChatSendData(channel, diceRolledText);
            data.setDiceRollResult();
            sendDiceRollResultMessage(data);
        }
        
        public function sendDiceRollResultMessage(data:ChatSendData):void {
            chatMessageTrader.sendMessage(data);
        }
        
        
        public function sendSystemMessage(messageBase:String, isPrintName:Boolean = true):void {
            chatMessageTrader.sendSystemMessage(messageBase, isPrintName);
        }
        
        public function addLocalMessage(message:String):void {
            chatMessageTrader.addLocalMessage(message);
        }
        
        public function sendChatMessageMany():void {
            var chatMessage:String = chatMessageInput.text;
            
            var guiInputSender:GuiInputSender = DodontoF_Main.getInstance().getGuiInputSender();
            guiInputSender.sendChatMessageMany(chatCharacterName.text, chatMessage, chatFontColor);
        }
        
        /*
        public function talkText():void {
            var chatMessage:String = chatMessageInput.text;
            //chatMessage = Utils.htmlToText(line);
            new TextTalker().sendText( chatMessage );
        }
        */
        
        private var userNames:Object = new Array();
        
        public function setUserNames(name:String):void {
            userNames[name] = true;
        }
        
        public function setChatFontSize(size:int, isReplayMode:Boolean = false):void {
            chatFontSize = size;
            chatMessageInput.setStyle("fontSize", chatFontSize);
            eachChatChannel(function(i:ChatMessageLogBox):void { i.setChatFontSize(chatFontSize); });
            
            if( isReplayMode ) {
                return;
            }
            
            printChatLog();
        }

        public function addMessageToChatLog(channel:int,
                                            senderName:String,
                                            chatMessage:String,
                                            color:String,
                                            time:Number,
                                            chatSenderUniqueId:String,
                                            isReplayChatMessage:Boolean = false):void {
            chatMessageTrader.addMessageToChatLog(channel,
                                                  senderName, 
                                                  chatMessage,
                                                  color,
                                                  time,
                                                  chatSenderUniqueId,
                                                  isReplayChatMessage);
        }
        
        public function addMessageToChatLogParts(channel:int,
                                                 senderName:String,
                                                 chatMessage:String,
                                                 color:String,
                                                 time:Number,
                                                 chatSenderUniqueId:String,
                                                 messageIndex:int = -1,
                                                 sendto:String = null,
                                                 isReplayChatMessage:Boolean = false):Boolean {
            
            return chatMessageTrader.addMessageToChatLogParts(channel,
                                                              senderName,
                                                              chatMessage,
                                                              color,
                                                              time,
                                                              chatSenderUniqueId,
                                                              messageIndex,
                                                              sendto,
                                                              isReplayChatMessage);
        }
        
        public function printAddedMessageToChatMessageLog():void {
            chatMessageTrader.printAddedMessageToChatMessageLog();
        }
        
        public function initForFirstRefresh(isWelcomeMessageOn:Boolean):void {
            if( isWelcomeMessageOn ) {
                sendSystemMessage("がログインしました。");
            }
            
            //初回ログイン用スクロール
            scrollChatMessageLogIfPositionIsLast(getSelectedChatChannleIndex(), true);
            
            isFirstLoadFinished = true;
        }
        
        public function scrollChatMessageLogIfPositionIsLast(channel:int, isForceScroll:Boolean):void {
            if( DodontoF_Main.getInstance().isReplayMode() ) {
                return;
            }
            
            if( novelticMode.isNovelticModeOn() ) {
                publicChatChannelBox.validateNow_All();
                novelticMode.scrollChatMessageLogIfPositionIsLast(isForceScroll);
                return;
            }
            
            getChatChannle(channel).scrollChatBox(isForceScroll);
        }
        
        public function scrollChatBox(component:Box, isForceScroll:Boolean = false):void {
            ChatMessageLogBox.scrollChatBox_static(chatFontSize, component, isForceScroll);
        }
        
        public function isScrollPositionBottom(channel:int):Boolean {
            if( getSelectedChatChannleIndex() != channel ) {
                return true;
            }
            
            return getChatChannle(channel).isScrollPositionBottom();
        }
        
        private function printChatLog():void {
            var channel:int = publicChatChannel;
            getChatChannle(channel).resizeChatLog(novelticMode);
            
            chatMessageTrader.printAddedMessageToChatMessageLog();
            scrollChatMessageLogIfPositionIsLast(publicChatChannel, true);
        }
    
        private var allUserName:String = '＜全員＞';
    
        private function getAlarmStringPrefix(userName:String):String {
            return "[アラーム発生：" + userName + "]:";
        }
    

        private function getAlarmString(userName:String, soundFileName:String, seconds:int):String {
            var text:String = getAlarmStringPrefix(userName) + soundFileName;
            if( seconds > 0 ) {
                text += ":" + seconds + "秒後";
            }
            return text;
        }
    
        public function isToMyAlarm(chatMessage:String):Boolean {
            Log.logging("chatMessage", chatMessage);
            Log.logging("getAlarmStringPrefix(allUserName)", getAlarmStringPrefix(allUserName));
            Log.logging("chatMessage", chatMessage);
            
            if( (chatMessage.indexOf( getAlarmStringPrefix(allUserName)) == 0) ||
                (chatMessage.indexOf( getAlarmStringPrefix(chatCharacterName.text))) == 0) {
                return true;
            }
            return false;
        }
    
        public function getUserNames():Array {
            var userNameArray:Array = new Array();
        
            userNameArray.push(allUserName);
        
            for(var key:String in userNames) {
                if( key == "" ) {
                    continue;
                }
                userNameArray.push(key);
            }
        
            return userNameArray;
        }
    
        private function printUpdateDateString(time:Number):void {
            Log.logging("chat time", time);
            var lastChatDate:Date = new Date(time * 1000);
            var dateString:String = StringUtil.substitute("{0}/{1}/{2} {3}:{4}:{5}", 
                                                          lastChatDate.fullYear,
                                                          lastChatDate.month,
                                                          lastChatDate.date,
                                                          lastChatDate.hours,
                                                          lastChatDate.minutes,
                                                          lastChatDate.seconds)
            Log.logging("dateString", dateString);
            //this.status = "更新：" + dateString;
        }
        
        
        public function saveChatLogHtml():void {
            var window:SaveChatLogWindow = DodontoF.popup(SaveChatLogWindow, true) as SaveChatLogWindow;
            window.init(this);
        }
        
        public function saveTargetChannelChatLogHtml(channel:int, isHtmlFormat:Boolean):void {
            var allChatLogList:Array = getChatChannle(channel).getAllChatLogList();
            if( isHtmlFormat ) {
                saveChatLogHtmlByChatLogList(allChatLogList);
            } else {
                var chatLogText:String = Utils.htmlToText(allChatLogList.join('\n'));
                
                var enterText:String = Utils.getEnterText();
                chatLogText = chatLogText.replace("\r", enterText);
                
                saveChatLogHtmlFromString(chatLogText, "txt");
            }
        }
        
        static public function saveChatLogHtmlByChatLogList(chatLogList:Array):void {
            
            if( ! Utils.isFileRefecenseLoadMethodSupportVersion() ) {
                Alert.show("この機能を使用するにはFlashPlayerのバージョン10以上が必要です。");
            }
            
            
            var chatLogHtml:String = "";
            chatLogHtml += "<?xml version='1.0' encoding='UTF-8'?>\n";
            chatLogHtml += "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>\n";
            chatLogHtml += "<html xmlns='http://www.w3.org/1999/xhtml' lang='ja'>\n";
            chatLogHtml += "  <head>\n";
            chatLogHtml += "    <meta http-equiv='Content-Type' content='text/html; charset=UTF-8' />\n";
            chatLogHtml += "    <title>チャットログ</title>\n";
            chatLogHtml += "  </head>\n";
            chatLogHtml += "  <body>\n";
            
            for(var i:int = 0 ; i < chatLogList.length ; i++) {
                var line:String = chatLogList[i];
                chatLogHtml += line.replace(/\r/g, "<br>\r\n") + "<br>\r\n";
            }
            
            chatLogHtml += "  </body>\n";
            chatLogHtml += "</html>";
            
            saveChatLogHtmlFromString(chatLogHtml);
        }
        
        static private function saveChatLogHtmlFromString(chatLogHtml:String, ext:String = "html"):void {
            var fileReferenceForDownload:FileReference = new FileReference();
            
            var dateString:String = DodontoF_Main.getDateString();
            var saveFileName:String = "chatLog_" + dateString + "." + ext;
            fileReferenceForDownload.save(chatLogHtml, saveFileName);
        }
    
    
        public function requestSaveChatLogResult(event:Event):void {
            Log.loggingTuning("=>requestSaveChatLogResult(event:Event) Begin");
        
            try {
                var jsonData:Object = SharedDataReceiver.getJsonDataFromResultEvent(event);
                var chatLogFileName:String = jsonData.chatLogFileName;
                Log.logging("chatLogFileName", chatLogFileName);
            
                var request:URLRequest = new URLRequest(chatLogFileName);
                navigateToURL(request);
            } catch(e:Error) {
                Log.loggingException("ChatWindow.requestSaveChatLogResult()", e);
            }

            Log.loggingTuning("=>requestSaveChatLogResult(event:Event) End");
        }
        
        [Embed(source="sound/page.mp3")]
        [Bindable]
        private var addMessageSound:Class;

        private var isSoundPlaying:Boolean = false;
        
        //どどんとふ起動後の初期手続きが完了したかのチェック用。
        private var isFirstLoadFinished:Boolean = false;
        
        public function playAddMessageSound(senderName:String):void {
            if( ! isFirstLoadFinished ) {
                return;
            }
            
            if( ! isSoundOn ) {
                return;
            }
        
            if( isActive ) {
                return;
            }
            
            if( senderName == chatCharacterName.text ) {
                return;
            }
        
            if( isSoundPlaying ) {
                return;
            }
            
            isSoundPlaying = true;
            var sound:Sound = new addMessageSound() as Sound; 
            sound.play();
            isSoundPlaying = false;
        }
    
        public function openCreateStandingGraphicsWindow():void {
            DodontoF.popup(StandingGraphicsManageWindow, true);
        }
        
        private function uploadFile():void {
            DodontoF.popup(FileUploadWindow, true);
        }
        
        public function openCreateCutInWindow():void {
            DodontoF.popup(CutInMovieManageWindow, false);
        }
        
        private var soundChannel:SoundChannel;
    
        private function sendOrStopSound():void {
            if( stopSound() ) {
                return;
            }
            
            AlarmWindow.setChatWindow(this);
            DodontoF.popup(AlarmWindow, true);
        }
    
        public function sendSound(userName:String, soundFileName:String, seconds:int):void {
            var alarmString:String = getAlarmString(userName, soundFileName, seconds);
            chatMessageTrader_sendMessage(publicChatChannel, alarmString);
        }
    
        private function stopSound():Boolean {
            if( soundChannel == null ) {
                return false;
            }
        
            setSendSoundButtonOn();
            soundChannel.stop();
            soundChannel = null;
            return true;
        }
        
        private function setSendSoundButtonOn():void {
            sendSoundButton.source = sendSoundIcon;
            sendSoundButton.toolTip = "目覚ましアラーム送信";
        }
        
        private function setSendSoundButtonOff():void {
            sendSoundButton.source = stopSoundIcon;
            sendSoundButton.toolTip = "目覚ましアラーム停止";
        }
        
        private function getSecondsFromAlarmText(text:String):int {
            if( text == null ) {
                return 0;
            }
            
            var secondsText:String = text.substring(0,(text.length - 2));
            var seconds:int = parseInt(secondsText);
            return seconds;
        }
        
        public function playSound(message:String):void {
            if( ! isSoundOn ) {
                return;
            }
            
            var soundInfo:Array = message.split("]:");
            var messagePart:String = soundInfo[1];
            var soundInfo2:Array = messagePart.split(":");
            
            var soundFileName:String = soundInfo2[0];
            var seconds:int = getSecondsFromAlarmText(soundInfo2[1]);
            
            soundFileName = Config.getInstance().getUrlString(soundFileName);
            Log.logging("soundFileName", soundFileName);
            
            playSoundLater(soundFileName, seconds);
        }
        
        private function playSoundLater(soundFileName:String, seconds:int):void {
            var timer : Timer = new Timer(seconds * 1000, 1);
            
            timer.addEventListener(TimerEvent.TIMER, function(event:TimerEvent) : void {
                    stopSound();
                    setSendSoundButtonOff();
                    
                    var sound:Sound = new Sound( new URLRequest(soundFileName) );
                    soundChannel = sound.play(0, 1);
                    soundChannel.addEventListener(Event.SOUND_COMPLETE,
                                                  soundCompleteHandler);
                });
            timer.start();
        }
        
        private function soundCompleteHandler(event:Event):void {
            sendOrStopSound();
        }
    
        //親コンポーネントへのイベント通知をブロックしたい場合に以下の関数を呼び出す。
        private function blockEvent(event:MouseEvent):void {
            event.stopPropagation();
        }
        
        
        public function setSoundState(b:Boolean):void {
            isSoundOn = b;
            setSoundStateImage();
        }
        
        private function changeSoundState():void {
            setSoundState( ! isSoundOn );
        }
        
        private function setSoundStateImage():void {
            if( isSoundOn ) {
                soundStatusImage.source = soundOnIcon;
                soundStatusImage.toolTip = "音再生あり";
            } else {
                soundStatusImage.source = soundOffIcon;
                soundStatusImage.toolTip = "音再生なし";
            }
        }
    
        public function setStandingGraphicsDisplayState(b:Boolean):void {
            standingGraphics.setDisplayState( b );
            refreshChatCharacterName();
        }
    
        private function setChatFontWindow():void {
            var chatFontWindow:ChatFontWindow = DodontoF.popup(ChatFontWindow, true) as ChatFontWindow;
            chatFontWindow.init(this, chatFontColor, chatBackgroundColor, chatFontSize);
        }
    
        public function setChatFontColor(color:String):void {
            chatFontColor = color;
            chatMessageBase.setStyle('color', '0x' + color);
        }
    
        public function getChatBackgroundColor():String {
            return chatBackgroundColor;
        }
        
        public function setChatBackgroundColor(color:String):void {
            chatBackgroundColor = color;
            eachChatChannel(function(i:ChatMessageLogBox):void { i.setBackGroundColor(color); });
            chatMessageInput.setStyle('backgroundColor', '0x' + color);
            novelticMode.setChatBackgroundColor(color);
        }
        
        public function getPublicChatMessageLogList():Array {
            return publicChatChannelBox.getChatMessageLogList();
        }
        
        public function clearPublicChatMessageLog():void {
            publicChatChannelBox.clearChatMessageLog();
        }
        
        public function addChatLogText(channel:int):Boolean {
            var isCurrentChannel:Boolean = (channel == getSelectedChatChannleIndex());
            var isAdded:Boolean = getChatChannle(channel).addChatLogText(novelticMode, isCurrentChannel, isFirstLoadFinished);
            if( ! isAdded ) {
                return false;
            }
            
            if( ! isCurrentChannel ) {
                chatMessageLogBoxTab.getTabAt(channel).styleName = "nocheckTabStyle";
            }
            return true;
        }
        
        public function changeNovelticMode():void {
            var toChangeModeName:String = (novelticMode.isNovelticModeOn() ? 
                                           "通常のチャットログ表示モード" :
                                           "ノベルゲーム風表示モード");
            var message:String = toChangeModeName + "に切り替えますか？\n(切り替えには時間がかかります。";
            
            var changeFunction:Function = function(e : CloseEvent) : void {
                if (e.detail != Alert.OK) {
                    return;
                }
                novelticMode.changeNovelticMode();
            }
            
            Alert.show(message,
                       "チャット表示切替確認", 
                       (Alert.OK | Alert.CANCEL),
                       null, 
                       changeFunction);
        }
        
        private function visibleSecretTalk():void {
            nameBox.removeChild(secretTalkButton);
            sendtoBox.visible = true;
            sendtoBox.width = 100;
        }
        
        private function changeWindowColorAndTitle(titleTail:String, color:String):void {
            var titleString:String = "チャット";
            if( titleTail != "" ) {
                titleString += (" -> " + titleTail);
            }
            this.title = titleString;
            
            setStyle("backgroundColor", color);
        }
        
        private function changeDefaultWindowColorAndTitle():void {
            changeWindowColorAndTitle("", "#F4FBFF");
        }
        
        private function changeSendtoBox():void {
            
            if( sendtoBox.selectedItem.data != null ) {
                changeWindowColorAndTitle(sendtoBox.selectedItem.label, "#FFFF99");
            } else {
                changeDefaultWindowColorAndTitle();
            }
        }
        
        public function changeLogVisible(event:MouseEvent, visible:Boolean):void {
            novelticMode.setLogVisible(event, visible);
        }
        
        
        public function changeVisiterMode():void {
            if( DodontoF_Main.getInstance().isVisiterMode() ) {
                changeWindowColorAndTitle("見学モード","#FFFFCC");
            } else {
                changeDefaultWindowColorAndTitle();
            }
        }
        
        public function updateChatWindowSendtoBox(loginUserInfo:Array, uniqueId:String):void {
            var preData:String = null;
            if( sendtoBox.selectedItem != null ) {
                preData = sendtoBox.selectedItem.data;
            }
            
            var dataProvider:Array = [];
            
            var option_all:Object = {
                label : "（全員）",
                data : null};
            dataProvider.push(option_all);
            
            for(var i:int = 0 ; i < loginUserInfo.length ; i++) {
                var userInfo:Object = loginUserInfo[i];
                
                if( userInfo.userId == uniqueId ) {
                    continue;
                }
                
                var option:Object = {
                    label : userInfo.userName,// + ":" + userInfo.userId,
                    data : userInfo.userId};
                dataProvider.push(option);
            }
            
            sendtoBox.dataProvider = dataProvider;
            
            Utils.selectComboBox(sendtoBox, preData);
        }
        
        public function sendToTwitter():void {
            var urlVariables:URLVariables = new URLVariables();
            var locationHref:String = String(ExternalInterface.call("function(){return location.href}"));
            var reg:RegExp = /https?:\/\/[-_.!~*\'()\w;\/?:@&=+$,%#]+/;
            urlVariables.url = ((locationHref.search(reg)==0) ? locationHref : "");
            urlVariables.text = chatMessageInput.text;
            urlVariables.related = "torgtaitai:どどんとふ作者です";
            var urlRequest:URLRequest = new URLRequest("https://twitter.com/share");
            urlRequest.data = urlVariables;
            navigateToURL(urlRequest, "_blank");
            
            sendChatMessageLocal();
        }
    ]]>
  </mx:Script>
  
</torgtaitai:ResizableWindow>
