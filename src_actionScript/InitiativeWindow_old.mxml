<?xml version="1.0" encoding="utf-8"?>
<torgtaitai:ResizableWindow
   xmlns:mx="http://www.adobe.com/2006/mxml"
   xmlns:torgtaitai="*"
   title="イニシアティブ表"
   width="10" height="300"
   showCloseButton="true"
   verticalScrollPolicy="off"
  >
  <mx:Box id="roundBaseBox"
          width="100%" height="70"
          horizontalAlign="center"
          verticalGap="1"
          >
    <mx:Button id="resetButton" height="15" label="戦闘開始" click="reset()" />
    <mx:Label id="roundTimerRound" height="15" width="100%" textAlign="center" fontSize="10" />
    <mx:Label id="roundTimerInitiative" height="15" width="100%" textAlign="center" fontSize="10" />
    
    <mx:HBox
       width="100%" height="15"
       horizontalAlign="center"
       verticalAlign="middle"
       verticalGap="1"
       >
      <mx:Button id="prevButton" height="15" label="戻る" click="previous()" />
      <mx:Button id="nextButton" height="15" label="次へ" click="next()" />
    </mx:HBox>
  </mx:Box>
  
  <mx:Box id="initiativeInfoBox"
          width="100%" height="100%"
          horizontalAlign="center"
          verticalAlign="top"
          verticalScrollPolicy="on"
          />
  
  <mx:Script>
    <![CDATA[
      import mx.core.Application;
      import mx.managers.PopUpManager;
      import mx.controls.Alert;
      import flash.events.Event;
      import flash.events.FocusEvent;
      import mx.controls.TextArea;
      import mx.containers.Box;
      import mx.containers.HBox;
      import mx.controls.Label;
      import  flash.events.KeyboardEvent;
      import mx.effects.Glow;
      import mx.controls.TextArea;
      
      private function getRoundTimer():RoundTimer {
        var roundTimer:RoundTimer = DodontoF_Main.getInstance().getRoundTimer();
        Log.logging("InitiativeWindow init roundTimer", roundTimer);
        return roundTimer;
      }

      override public function getSaveInfoKeyName():String {
          return "InitiativeWindow";
      }
        
      override public function setup():void {
        instance = this;
        setInitPosition();
        
        setResizeEventFunction( resizeInitiativeInfoBox );
        resizeInitiativeInfoBox.call();
      }
      
      public function resizeInitiativeInfoBox():void {
          initiativeInfoBox.height = this.height - roundBaseBox.height - 60;
      }
      
      public function refresh():void {
          Log.logging("InitiativeWindow.refresh Begin");
          
          var initiativedPieces:Array = getRoundTimer().getSortedInitiativedPiece();
          
          this.clear(getRoundTimer().getCurrentRound(),
                     getRoundTimer().getCurrentInitiative());
          
          for(var i:int = 0 ; i < initiativedPieces.length ; i++) {
              var piece:InitiativedPiece = initiativedPieces[i];
              Log.logging("piece is ", piece);
              Log.logging("refreshInitiativeList roundTimer.addCharacter()");

              var isCurrent:Boolean = ( piece.getInitiative() == getRoundTimer().getCurrentInitiative() );
              this.addCharacter(piece, isCurrent);
          }

          Log.logging("roundBaseBox.height", roundBaseBox.height);
          Log.logging("this.height", this.height);
          
          Log.logging("InitiativeWindow.refresh End");
      }

      public function addCharacter(piece:InitiativedPiece, isCurrent:Boolean):void {
          Log.logging("addCharacter begin");
          
          var characterInfoBox:HBox = getCharacterInfoBox(piece);
          var initiativeLabel:mx.controls.Label = getInitiativeLabel(piece);
          var editButton:Button = getEditButton(piece);
          
          var titleBox:mx.containers.VBox = getTitleBox();
          titleBox.addChild(initiativeLabel);
          titleBox.addChild(editButton);
          
          if( piece.canDeleteOnInitiativeList() ) {
              var deleteButton:Button = getDeleteButton(piece);
              titleBox.addChild(deleteButton);
          }
          
          var characterInfoTextBox:Box
               = getCharacterInfoTextBox(piece, characterInfoBox, editButton);
          
          characterInfoBox.addChild(titleBox);
          characterInfoBox.addChild(characterInfoTextBox);
          initiativeInfoBox.addChild(characterInfoBox);
          
          characterInfos.push(characterInfoBox);

          var backgroundColor:uint = 0xFFFFFF;
          if( isCurrent ) {
              backgroundColor = 0xFFFFBB;
          }
          characterInfoBox.setStyle("backgroundColor", backgroundColor);
          if( piece.isDead() ) {
              characterInfoTextBox.enabled = false;
          }
          
          Log.logging("addCharacter end");
      }
      
      private function getCharacterInfoBox(piece:InitiativedPiece):HBox {
          Log.logging("create characteInfoBox");

          var characterInfoBox:HBox = new HBox();
          characterInfoBox.x = 0;
          characterInfoBox.y = characterInfos.length * 100;
          characterInfoBox.height = 65; //50;
          characterInfoBox.percentWidth = 100;
          characterInfoBox.setStyle("borderStyle", "solid");
          characterInfoBox.setStyle("verticalAlign", "middle");
          characterInfoBox.setStyle("horizontalGap", "0");
          characterInfoBox.setStyle("verticalGap", 0);
          characterInfoBox.addEventListener(MouseEvent.CLICK, function(event:Event):void {
                  piece.pickup();
              });
          
          characterInfoBox.doubleClickEnabled = true;
          characterInfoBox.addEventListener(MouseEvent.DOUBLE_CLICK, function(event:MouseEvent):void {
                  piece.pickupToCenter();
              });
          
          piece.setClickEvent( function():void{
                  var dodontoF:DodontoF = DodontoF_Main.getInstance().getDodontoF();
                  var glowEffect:Glow = dodontoF.getGlowEffect();
                  glowEffect.end();
                  glowEffect.play( [characterInfoBox] );
                  initiativeInfoBox.validateNow();
                  characterInfoBox.validateNow();
                  initiativeInfoBox.verticalScrollPosition = characterInfoBox.y - characterInfoBox.height - 10;
              });
          
          return characterInfoBox;
      }

      private function getInitiativeLabel(piece:InitiativedPiece):mx.controls.Label {
          Log.logging("create initiativeLabel");

          var initiativeLabel:mx.controls.Label = new mx.controls.Label();
          initiativeLabel.text = "" + piece.getInitiative();
          initiativeLabel.height = 15;
          initiativeLabel.width = 30;
          initiativeLabel.setStyle("verticalAlign", "middle");
          initiativeLabel.setStyle("horizontalAlign", "center");
          initiativeLabel.setStyle("textAlign", "center");
          
          return initiativeLabel;
      }
      
      private function getAnyButtonPiece(piece:InitiativedPiece,
                                         label:String, 
                                         func:Function):Button {
          Log.logging("create anyButton");
          
          var editButton:Button = new Button();
          editButton.height = 15;
          editButton.width = 30;
          editButton.setStyle("paddingLeft", 0);
          editButton.setStyle("paddingRight", 0);
          editButton.setStyle("fontSize", 10);
          editButton.label = label;
          editButton.addEventListener(MouseEvent.CLICK, function(event:Event):void {
              func.call();
          });
          
          return editButton;
      }

      private function getEditButton(piece:InitiativedPiece):Button {
          Log.logging("create editButton");
          return getAnyButtonPiece(piece, "変更", piece.popUpChangeWindow);
      }
      
      private function getDeleteButton(piece:InitiativedPiece):Button {
          Log.logging("create deleteButton");
          return getAnyButtonPiece(piece, "削除", piece.popUpDeleteWindow);
      }

      private function getTitleBox():mx.containers.VBox {
          Log.logging("create titleBox");
          var titleBox:mx.containers.VBox = new mx.containers.VBox();
          titleBox.setStyle("horizontalAlign", "center");
          titleBox.setStyle("verticalAlign", "middle");
          titleBox.setStyle("horizontalGap", "0");
          titleBox.setStyle("verticalGap", 0);
          
          return titleBox;
      }
      
      private function getBoxForCharacterInfoTextLine(infoText:String, height:int):Box {
          //var text:TextArea = new TextArea();
          //text.editable = false;
          var text:Label = new Label();
          text.text = infoText;
          text.percentWidth = 100;
          text.height = height;
          
          var textBox:Box = new Box();
          textBox.percentWidth = 100;
          textBox.height = text.height;
          textBox.addChild(text);
          
          return textBox;
      }
      
      private function getCharacterInfoTextBox(piece:InitiativedPiece,
                                               characterInfoBox:HBox,
                                               editButton:Button):Box {
          Log.logging("create characterInfoTextArea");
          
          var infoBox:Box = new Box();
          infoBox.setStyle("horizontalGap", 0);
          infoBox.setStyle("verticalGap", 0);
          //infoBox.setStyle("backgroundColor", 0xFFFFFF);
          infoBox.percentWidth = 100;
          
          var heightRest:int = characterInfoBox.height;
          var lineTextHeight:int = 16;
          
          var nameTextBox:Box = getBoxForCharacterInfoTextLine( "[" + piece.getName() + "]", lineTextHeight );
          infoBox.addChild(nameTextBox);
          heightRest -= lineTextHeight;
          
          var addInfos:Array = piece.getAdditionalInfos();
          for(var i:int = 0 ; i < addInfos.length ; i++) {
              var addInfoText:String = addInfos[i] as String;
              var addInfoTextBox:Box = getBoxForCharacterInfoTextLine( addInfoText, lineTextHeight );
              infoBox.addChild( addInfoTextBox );
              heightRest -= lineTextHeight;
          }
          
          var characterInfoTextArea:TextArea = getCharacterInfoTextArea(piece, heightRest);
          infoBox.addChild(characterInfoTextArea);
          
          return infoBox;
      }
      
      private function getCharacterInfoTextArea(piece:InitiativedPiece, heightRest:int):TextArea {
          var characterInfoTextArea:TextArea = new TextArea();
          characterInfoTextArea.text = piece.getInfo()//getInitiativeListInfo();
          characterInfoTextArea.height = heightRest - 2;
          characterInfoTextArea.percentWidth = 100;
          characterInfoTextArea.setStyle("paddingLeft", 0);
          characterInfoTextArea.setStyle("paddingRight", 0);
          characterInfoTextArea.editable = true;
          characterInfoTextArea.addEventListener(FocusEvent.FOCUS_OUT, function(event:FocusEvent):void {
                  if( characterInfoTextArea.text == piece.getInfo() ) {
                      return;
                  }
                  
                  piece.setInfo( characterInfoTextArea.text );
                  DodontoF_Main.getInstance().getGuiInputSender().getSender().changeCharacter( piece.getJsonData() );
          });
          
          return characterInfoTextArea;
      }
      
      private var characterInfos:Array = new Array();

      public function clear(currentRound:int, currentInitiative:Number):void {
          roundTimerRound.htmlText = "ラウンド：" + currentRound + "<br />";
          roundTimerInitiative.htmlText = "イニシアティブ：" + currentInitiative;
          setAllButtonsStatus(true);
          while( characterInfos.length > 0 ) {
              initiativeInfoBox.removeChild( characterInfos.pop() );
          }
      }
      
      private static var instance:InitiativeWindow;
      
      public static function getInstance():InitiativeWindow {
          return instance;
      }
      
      public function setInitPosition():void {
          if( loadPosition() ) {
              return;
          }
          
          this.width = DodontoF_Main.getInstance().getDiceBox().width;
          
          var screenWidth:int = DodontoF_Main.getInstance().getScreenWidth();
          var screenHeigth:int = DodontoF_Main.getInstance().getScreenHeight();
          var diceBoxHeigth:int = DodontoF_Main.getInstance().getDiceBox().height;
          var heightPadding:int = 10;
          
          if( diceBoxHeigth == 0 ) {
              heightPadding = 0;
          }
          
          this.x = screenWidth - this.width;
          this.y = 50;
          this.height = screenHeigth - diceBoxHeigth - heightPadding - this.y;
      }
      
      private function setAllButtonsStatus(isEnable:Boolean):void {
          resetButton.enabled = isEnable;
          roundTimerRound.enabled = isEnable;
          roundTimerInitiative.enabled = isEnable;
          nextButton.enabled = isEnable;
          
          if( getRoundTimer().getHistoryCount() == 0 ) {
              prevButton.enabled = false;
          } else {
              prevButton.enabled = isEnable;
          }
      }

      private function previous():void {
          Log.logging("previous begin");
          setAllButtonsStatus(false);
          getRoundTimer().previous();
          Log.logging("previous end");
      }

      private function next():void {
          Log.logging("next begin");
          setAllButtonsStatus(false);
          getRoundTimer().next();
          Log.logging("next end");
      }

      private function reset():void {
          Log.logging("reset begin");
          setAllButtonsStatus(false);
          getRoundTimer().reset();
          Log.logging("reset end");
      }

    ]]>
  </mx:Script>

</torgtaitai:ResizableWindow>
