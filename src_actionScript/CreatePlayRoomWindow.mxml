<?xml version="1.0" encoding="utf-8"?>
<torgtaitai:CommonPopupWindow
   xmlns:mx="http://www.adobe.com/2006/mxml"
   xmlns:torgtaitai="*" 
   width="400"
   height="215"
   title="プレイルーム作成" 
   showCloseButton="true"
   >
  
  <mx:Box width="100%" height="100%"
          verticalGap="1" horizontalGap="1" >
    
	<mx:Label text="新規プレイルームを作成します。" />
    <mx:HBox height="25" width="100%" horizontalAlign="center" verticalAlign="middle" >
	  <mx:Label text="プレイルーム名:" />
      <mx:TextInput id="playRoomName" width="100%" text="" />
    </mx:HBox>
    <mx:HBox height="25" width="100%" horizontalAlign="center" verticalAlign="middle" >
	  <mx:Label text="パスワード(空ならパスワード無し):" />
      <mx:TextInput id="playRoomPassword" width="100%" text=""
                    displayAsPassword="true"
                    />
    </mx:HBox>
    
    <mx:HBox height="25" width="100%" horizontalAlign="center" verticalAlign="middle" >
	  <mx:Label text="ゲームシステム（自由入力も可）:" />
      <torgtaitai:SuggestComboBox id="gameType" width="100%" rowCount="10"
                                  labelField="name"
                                  />
    </mx:HBox>
    
    <mx:Spacer width="100%" height="5" />
    
    <mx:Button id="extendButton" label="＞＞拡張機能" click="extend()" />
    
    <mx:Box id="extendBox" height="0" width="100%" visible="false" >
      
      <mx:HBox id="canUseExternalImageBox" height="25" width="100%"
               toolTip="外部画像の許可を行うと画像指定時に外部URLが使用出来るようになります。指定していない場合に外部URLを画像に使用すると×マークに指し換わります。"
               >
        <mx:Label text="外部URLの許容:" />
	    <mx:RadioButtonGroup id="canUseExternalImageRadioGroup" />
	    <mx:RadioButton groupName="canUseExternalImageRadioGroup"
                        id="canUseExternalImage" 
                        value="canUseExternalImage" 
                        label="外部URL使用可"
                        />
	    <mx:RadioButton groupName="canUseExternalImageRadioGroup"
                        selected="true"
                        id="canNotUseExternalImage"
                        value="canNotUseExternalImage"
                        label="外部URL使用不可"
                        />
      </mx:HBox>
      
      <mx:HBox id="visiterBox" height="25" width="100%"
               toolTip="見学可にすると、パスワード有りでも見学者ならログインできるようになります。見学者はチャットの「見学用」タブでの発言のみが許可され、名前は「（名前）＠見学」になります。チャット発言意外の、マップやキャラ等の操作は一切できません。"
               >
        <mx:Label text="見学者の可否:" />
	    <mx:RadioButtonGroup id="canVisitRadioGroup" />
	    <mx:RadioButton groupName="canVisitRadioGroup"
                        id="canVisit" 
                        value="canVisit" 
                        label="見学可"
                        click="changeVisitMode(true)"
                        />
	    <mx:RadioButton groupName="canVisitRadioGroup"
                        selected="true"
                        id="canNotVisit"
                        value="canNotVisit"
                        label="見学不可"
                        click="changeVisitMode(false)"
                        />
      </mx:HBox>
      
      <mx:Box width="100%">
        <mx:Label text="使用するチャットのタブ:" />
        <mx:Label text="半角・全角スペースでタブ名を区切ってください。（例：「雑談　打ち合わせ　メモ用」）" />
        <mx:HBox height="25" width="100%" horizontalAlign="center" verticalAlign="middle" >
          <mx:Label id="publicChannelLabel" text="" />
          <mx:TextInput id="chatChannelNamesText" width="100%" text="雑談" />
          <mx:Label id="visiterChannlelLabel" width="0" text="見学用" />
        </mx:HBox>
      </mx:Box>
      
      <mx:Box id="viewStateInfosBox"
              width="100%" height="100%" >
        <mx:Label text="この部屋の表示設定。変更するとルーム内全員の設定が変更されます。" />
      </mx:Box>
      
    </mx:Box>
    
    <mx:HBox height="30" width="100%" horizontalAlign="center" verticalAlign="middle">
      <mx:Button id="executeButton" label="作成" click="execute()" />
      <mx:Button label="キャンセル" click="closeAction()" />
    </mx:HBox>
    </mx:Box>
  <mx:Script>
    <![CDATA[
             
    import mx.containers.TitleWindow;
    import mx.managers.PopUpManager;
    import mx.controls.Alert;
    import mx.controls.CheckBox;
    
    
    protected var resultFunction:Function;
    protected var canselFunction:Function;
    protected var playRoomIndex:int;
    
    public function initParams(playRoomIndex_:int, resultFunction_:Function = null, canselFunction_:Function = null):void {
        playRoomIndex = playRoomIndex_;
        resultFunction = resultFunction_;
        canselFunction = canselFunction_;
        playRoomName.text = "仮プレイルーム（削除可能）";
        playRoomName.toolTip = "プレイルーム名を設定しない場合、仮使用とみなして削除されます。\n正式に利用する場合には正しく名前をつけましょう。";
    }
    
    override protected function setup():void {
        try {
            init();
            initViewStateInfos();
            initGameType();
        } catch(error:Error) {
            this.status = error.message;
        }
    }

    override protected function teardown():void {
        if( canselFunction != null ) {
            canselFunction();
        }
    }
    
    protected function init():void {
        publicChannelLabel.text = DodontoF_Main.getInstance().publicChatChannelName;
    }
    
    protected function initGameType():void {
        var diceBotInfos:Array = DodontoF_Main.getInstance().getDiceBotInfos();
        diceBotInfos[0].name = "（指定なし）";
        gameType.dataProvider = diceBotInfos;
        
        if( ChatWindow.getInstance() != null ) {
            var gameTypeText:String = ChatWindow.getInstance().getGameType();
            Utils.selectComboBox(gameType, gameTypeText, "gameType");
        }
    }
    
    protected var menuInfos:Array = null;
    
    protected function initViewStateInfos():void {
        menuInfos = DodontoF_Main.getInstance().getDodontoF().collectMainMenuInfos();
        
        for each(var info:Object in menuInfos) {
                var checkBox:CheckBox = new CheckBox();
                checkBox.label = info.label;
                checkBox.selected = info.toggled;
                viewStateInfosBox.addChild( checkBox );
                info.checkBox = checkBox;
            }
    }
    
    
    protected function getChatChannelNames():Array {
        var parts:Array = chatChannelNamesText.text.split(/[\s　]+/);
        
        var chatChannelNames:Array = new Array();
        chatChannelNames.push( DodontoF_Main.publicChatChannelName );
        
        for(var i:int = 0 ; i < parts.length ; i++) {
            var name:String = parts[i];
            if( name == "" ) {
                continue;
            }
            
            chatChannelNames.push(name);
        }
        
        if( canVisit.selected ) {
            chatChannelNames.push("見学用");
        }
        
        return chatChannelNames;
    }
    
    protected function getViewStates():Object {
        var result:Object = new Object();
        
        for each(var info:Object in menuInfos) {
                var checkBox:CheckBox = info.checkBox;
                result[ info.data ] = checkBox.selected;
            }
        
        Log.logging("getViewStates result", result);
        return result;
    }

    protected function getGameType():String {
        var item:Object = gameType.selectedItem;
        var itemClass:String = getQualifiedClassName(item);
        
        Log.logging("getGameType item", item);
        Log.logging("getGameType itemClass", itemClass);
        
        var result:String = null;
        
        if( itemClass == "String" ) {
            result = item as String;
            Log.logging("getGameType item is String, so result", result);
            return result;
        }
        
        if( item == null ) {
            return null;
        }
        
        result = item.gameType;
        
        Log.logging("getGameType result", result);
        return result;
    }
    
    protected function execute():void {
        Log.loggingTuning("=>createPlayRoom Begin");
        
        var chatChannelNames:Array = getChatChannelNames();
        
        try {
            var guiInputSender:GuiInputSender = DodontoF_Main.getInstance().getGuiInputSender();
            guiInputSender.createPlayRoom(playRoomName.text,
                                          playRoomPassword.text,
                                          chatChannelNames,
                                          canUseExternalImage.selected,
                                          canVisit.selected,
                                          getGameType(),
                                          getViewStates(),
                                          playRoomIndex,
                                          executeResult);
        } catch(error:Error) {
            this.status = "execute error : " + error.message;
        }
        
        Log.loggingTuning("=>createPlayRoom End");
    }
    
    public function executeResult(event:Event):void {
        try{
            var jsonData:Object = SharedDataReceiver.getJsonDataFromResultEvent(event);
            var resultText:String = jsonData.resultText;
            
            var chatChannelNames:Array = getChatChannelNames();
            
            if( resultText != "OK" ) {
                printError(resultText);
                return;
            }
            
            DodontoF_Main.getInstance().setPlayRoomPassword(playRoomPassword.text);
            
            PopUpManager.removePopUp(this);
            
            if( resultFunction != null ) {
                if( playRoomIndex == -1 ) {
                    resultFunction(jsonData.playRoomIndex);
                } else {
                    resultFunction(playRoomPassword.text);
                }
            }
        } catch(error:Error) {
            status = "executeResult error : " + error.message;
        }
    }
    
    private function printError(resultText:String):void {
        resultText = Messages.getMessage(resultText);
        Alert.show(resultText);
        status = "server error : "+ resultText;
    }
    
    private var extendMode:Boolean = false;
    
    public function extend():void {
        extendMode = ( ! extendMode);
        
        var extendHeight:int = 105
            + visiterBox.height
            + canUseExternalImageBox.height
            + 90;//viewStateInfosBox.height;
        
        if( extendMode ) {
            extendButton.label = "＜＜拡張機能を隠す";
            extendBox.height = extendHeight;
            this.height += extendHeight;
            extendBox.visible = true;
        } else {
            extendButton.label = "＞＞拡張機能";
            extendBox.height = 0;
            this.height -= extendHeight;
            extendBox.visible = false;
        }
        
        PopUpManager.centerPopUp(this);
    }
    
    public function changeVisitMode(canVisitValue:Boolean):void {
        if( canVisitValue ) {
            visiterChannlelLabel.width = 50;
        } else {
            visiterChannlelLabel.width = 0;
        }
    }
    
    ]]>
  </mx:Script>
</torgtaitai:CommonPopupWindow>
